/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type UserFundedPropertyStruct = {
  id: PromiseOrValue<BigNumberish>;
  name: PromiseOrValue<string>;
  price: PromiseOrValue<BigNumberish>;
  baseImage: PromiseOrValue<string>;
  minted: PromiseOrValue<boolean>;
};

export type UserFundedPropertyStructOutput = [
  BigNumber,
  string,
  BigNumber,
  string,
  boolean
] & {
  id: BigNumber;
  name: string;
  price: BigNumber;
  baseImage: string;
  minted: boolean;
};

export type UserFundingStruct = {
  timestamp: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  property: UserFundedPropertyStruct;
  id: PromiseOrValue<BigNumberish>;
};

export type UserFundingStructOutput = [
  BigNumber,
  BigNumber,
  UserFundedPropertyStructOutput,
  BigNumber
] & {
  timestamp: BigNumber;
  amount: BigNumber;
  property: UserFundedPropertyStructOutput;
  id: BigNumber;
};

export type UserStruct = {
  username: PromiseOrValue<string>;
  fundings: UserFundingStruct[];
  totalFunds: PromiseOrValue<BigNumberish>;
  assetsFunded: PromiseOrValue<BigNumberish>;
  logoUrl: PromiseOrValue<string>;
};

export type UserStructOutput = [
  string,
  UserFundingStructOutput[],
  BigNumber,
  BigNumber,
  string
] & {
  username: string;
  fundings: UserFundingStructOutput[];
  totalFunds: BigNumber;
  assetsFunded: BigNumber;
  logoUrl: string;
};

export interface UserManagerInterface extends utils.Interface {
  functions: {
    "addNewUserFunding(address,(uint256,string,uint256,string,bool),uint256)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "getUserFundingPaginated(address,uint256,uint256)": FunctionFragment;
    "mintPropertyNFT(uint256,string)": FunctionFragment;
    "setUserLogo(string)": FunctionFragment;
    "setUsername(string)": FunctionFragment;
    "users(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNewUserFunding"
      | "getUser"
      | "getUserFundingPaginated"
      | "mintPropertyNFT"
      | "setUserLogo"
      | "setUsername"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNewUserFunding",
    values: [
      PromiseOrValue<string>,
      UserFundedPropertyStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFundingPaginated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPropertyNFT",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserLogo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsername",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewUserFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserFundingPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPropertyNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserLogo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {};
}

export interface UserManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNewUserFunding(
      _user: PromiseOrValue<string>,
      _property: UserFundedPropertyStruct,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[UserStructOutput]>;

    getUserFundingPaginated(
      _user: PromiseOrValue<string>,
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[UserFundingStructOutput[], BigNumber, BigNumber]>;

    mintPropertyNFT(
      _funding: PromiseOrValue<BigNumberish>,
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUserLogo(
      _logoUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsername(
      _username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        username: string;
        totalFunds: BigNumber;
        assetsFunded: BigNumber;
        logoUrl: string;
      }
    >;
  };

  addNewUserFunding(
    _user: PromiseOrValue<string>,
    _property: UserFundedPropertyStruct,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUser(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<UserStructOutput>;

  getUserFundingPaginated(
    _user: PromiseOrValue<string>,
    _offset: PromiseOrValue<BigNumberish>,
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[UserFundingStructOutput[], BigNumber, BigNumber]>;

  mintPropertyNFT(
    _funding: PromiseOrValue<BigNumberish>,
    _uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUserLogo(
    _logoUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsername(
    _username: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      username: string;
      totalFunds: BigNumber;
      assetsFunded: BigNumber;
      logoUrl: string;
    }
  >;

  callStatic: {
    addNewUserFunding(
      _user: PromiseOrValue<string>,
      _property: UserFundedPropertyStruct,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UserStructOutput>;

    getUserFundingPaginated(
      _user: PromiseOrValue<string>,
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[UserFundingStructOutput[], BigNumber, BigNumber]>;

    mintPropertyNFT(
      _funding: PromiseOrValue<BigNumberish>,
      _uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserLogo(
      _logoUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsername(
      _username: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        username: string;
        totalFunds: BigNumber;
        assetsFunded: BigNumber;
        logoUrl: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    addNewUserFunding(
      _user: PromiseOrValue<string>,
      _property: UserFundedPropertyStruct,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserFundingPaginated(
      _user: PromiseOrValue<string>,
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPropertyNFT(
      _funding: PromiseOrValue<BigNumberish>,
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUserLogo(
      _logoUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsername(
      _username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewUserFunding(
      _user: PromiseOrValue<string>,
      _property: UserFundedPropertyStruct,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserFundingPaginated(
      _user: PromiseOrValue<string>,
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintPropertyNFT(
      _funding: PromiseOrValue<BigNumberish>,
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUserLogo(
      _logoUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsername(
      _username: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
