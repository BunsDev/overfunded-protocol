/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type PropertyStruct = {
  id: PromiseOrValue<BigNumberish>;
  name: PromiseOrValue<string>;
  owner: PromiseOrValue<string>;
  price: PromiseOrValue<BigNumberish>;
  funds: PromiseOrValue<BigNumberish>;
  images: PromiseOrValue<string>[];
  fundStorage: PromiseOrValue<string>;
  status: PromiseOrValue<BigNumberish>;
  verified: PromiseOrValue<boolean>;
  location: PromiseOrValue<string>;
};

export type PropertyStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  string[],
  string,
  number,
  boolean,
  string
] & {
  id: BigNumber;
  name: string;
  owner: string;
  price: BigNumber;
  funds: BigNumber;
  images: string[];
  fundStorage: string;
  status: number;
  verified: boolean;
  location: string;
};

export interface PropertyManagerInterface extends utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "addProfit(uint256,uint256)": FunctionFragment;
    "changeMaster(address)": FunctionFragment;
    "createNewProperty(string,uint256,string[],string)": FunctionFragment;
    "flagProperty(uint256)": FunctionFragment;
    "fundProperty(uint256,uint256)": FunctionFragment;
    "getProperties(uint256,uint256)": FunctionFragment;
    "getProperty(uint256)": FunctionFragment;
    "master()": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeProperty(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "verifyProperty(uint256)": FunctionFragment;
    "withdrawProfits(uint256)": FunctionFragment;
    "withdrawPropertyFund(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAdmin"
      | "addProfit"
      | "changeMaster"
      | "createNewProperty"
      | "flagProperty"
      | "fundProperty"
      | "getProperties"
      | "getProperty"
      | "master"
      | "removeAdmin"
      | "removeProperty"
      | "token"
      | "verifyProperty"
      | "withdrawProfits"
      | "withdrawPropertyFund"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addProfit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaster",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewProperty",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flagProperty",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundProperty",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProperties",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProperty",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProperty",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyProperty",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProfits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPropertyFund",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addProfit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flagProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProfits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPropertyFund",
    data: BytesLike
  ): Result;

  events: {
    "AdminAdded(address)": EventFragment;
    "AdminRemoved(address)": EventFragment;
    "MasterChanged(address)": EventFragment;
    "PropertyAdded(uint256)": EventFragment;
    "PropertyFlagged(uint256)": EventFragment;
    "PropertyFunded(uint256)": EventFragment;
    "PropertyPurchased(uint256)": EventFragment;
    "PropertyRemoved(uint256)": EventFragment;
    "PropertyVerified(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertyFlagged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertyFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertyPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertyVerified"): EventFragment;
}

export interface AdminAddedEventObject {
  _admin: string;
}
export type AdminAddedEvent = TypedEvent<[string], AdminAddedEventObject>;

export type AdminAddedEventFilter = TypedEventFilter<AdminAddedEvent>;

export interface AdminRemovedEventObject {
  _admin: string;
}
export type AdminRemovedEvent = TypedEvent<[string], AdminRemovedEventObject>;

export type AdminRemovedEventFilter = TypedEventFilter<AdminRemovedEvent>;

export interface MasterChangedEventObject {
  _newMaster: string;
}
export type MasterChangedEvent = TypedEvent<[string], MasterChangedEventObject>;

export type MasterChangedEventFilter = TypedEventFilter<MasterChangedEvent>;

export interface PropertyAddedEventObject {
  _id: BigNumber;
}
export type PropertyAddedEvent = TypedEvent<
  [BigNumber],
  PropertyAddedEventObject
>;

export type PropertyAddedEventFilter = TypedEventFilter<PropertyAddedEvent>;

export interface PropertyFlaggedEventObject {
  _id: BigNumber;
}
export type PropertyFlaggedEvent = TypedEvent<
  [BigNumber],
  PropertyFlaggedEventObject
>;

export type PropertyFlaggedEventFilter = TypedEventFilter<PropertyFlaggedEvent>;

export interface PropertyFundedEventObject {
  _id: BigNumber;
}
export type PropertyFundedEvent = TypedEvent<
  [BigNumber],
  PropertyFundedEventObject
>;

export type PropertyFundedEventFilter = TypedEventFilter<PropertyFundedEvent>;

export interface PropertyPurchasedEventObject {
  _id: BigNumber;
}
export type PropertyPurchasedEvent = TypedEvent<
  [BigNumber],
  PropertyPurchasedEventObject
>;

export type PropertyPurchasedEventFilter =
  TypedEventFilter<PropertyPurchasedEvent>;

export interface PropertyRemovedEventObject {
  _id: BigNumber;
}
export type PropertyRemovedEvent = TypedEvent<
  [BigNumber],
  PropertyRemovedEventObject
>;

export type PropertyRemovedEventFilter = TypedEventFilter<PropertyRemovedEvent>;

export interface PropertyVerifiedEventObject {
  _id: BigNumber;
}
export type PropertyVerifiedEvent = TypedEvent<
  [BigNumber],
  PropertyVerifiedEventObject
>;

export type PropertyVerifiedEventFilter =
  TypedEventFilter<PropertyVerifiedEvent>;

export interface PropertyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PropertyManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProfit(
      _property: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeMaster(
      _newMaster: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNewProperty(
      _name: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _images: PromiseOrValue<string>[],
      _location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flagProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundProperty(
      _property: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProperties(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PropertyStructOutput[], BigNumber, BigNumber] & {
        props: PropertyStructOutput[];
        nextOffset: BigNumber;
        total: BigNumber;
      }
    >;

    getProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PropertyStructOutput]>;

    master(overrides?: CallOverrides): Promise<[string]>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    verifyProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProfits(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawPropertyFund(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProfit(
    _property: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeMaster(
    _newMaster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNewProperty(
    _name: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _images: PromiseOrValue<string>[],
    _location: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flagProperty(
    _property: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundProperty(
    _property: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProperties(
    _offset: PromiseOrValue<BigNumberish>,
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [PropertyStructOutput[], BigNumber, BigNumber] & {
      props: PropertyStructOutput[];
      nextOffset: BigNumber;
      total: BigNumber;
    }
  >;

  getProperty(
    _property: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PropertyStructOutput>;

  master(overrides?: CallOverrides): Promise<string>;

  removeAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeProperty(
    _property: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  verifyProperty(
    _property: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProfits(
    _property: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawPropertyFund(
    _property: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addProfit(
      _property: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMaster(
      _newMaster: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewProperty(
      _name: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _images: PromiseOrValue<string>[],
      _location: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PropertyStructOutput>;

    flagProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundProperty(
      _property: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProperties(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PropertyStructOutput[], BigNumber, BigNumber] & {
        props: PropertyStructOutput[];
        nextOffset: BigNumber;
        total: BigNumber;
      }
    >;

    getProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PropertyStructOutput>;

    master(overrides?: CallOverrides): Promise<string>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    verifyProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProfits(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPropertyFund(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminAdded(address)"(_admin?: null): AdminAddedEventFilter;
    AdminAdded(_admin?: null): AdminAddedEventFilter;

    "AdminRemoved(address)"(_admin?: null): AdminRemovedEventFilter;
    AdminRemoved(_admin?: null): AdminRemovedEventFilter;

    "MasterChanged(address)"(_newMaster?: null): MasterChangedEventFilter;
    MasterChanged(_newMaster?: null): MasterChangedEventFilter;

    "PropertyAdded(uint256)"(_id?: null): PropertyAddedEventFilter;
    PropertyAdded(_id?: null): PropertyAddedEventFilter;

    "PropertyFlagged(uint256)"(_id?: null): PropertyFlaggedEventFilter;
    PropertyFlagged(_id?: null): PropertyFlaggedEventFilter;

    "PropertyFunded(uint256)"(_id?: null): PropertyFundedEventFilter;
    PropertyFunded(_id?: null): PropertyFundedEventFilter;

    "PropertyPurchased(uint256)"(_id?: null): PropertyPurchasedEventFilter;
    PropertyPurchased(_id?: null): PropertyPurchasedEventFilter;

    "PropertyRemoved(uint256)"(_id?: null): PropertyRemovedEventFilter;
    PropertyRemoved(_id?: null): PropertyRemovedEventFilter;

    "PropertyVerified(uint256)"(_id?: null): PropertyVerifiedEventFilter;
    PropertyVerified(_id?: null): PropertyVerifiedEventFilter;
  };

  estimateGas: {
    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProfit(
      _property: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeMaster(
      _newMaster: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNewProperty(
      _name: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _images: PromiseOrValue<string>[],
      _location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flagProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundProperty(
      _property: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProperties(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    verifyProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProfits(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawPropertyFund(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProfit(
      _property: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeMaster(
      _newMaster: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNewProperty(
      _name: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _images: PromiseOrValue<string>[],
      _location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flagProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundProperty(
      _property: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProperties(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyProperty(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProfits(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPropertyFund(
      _property: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
